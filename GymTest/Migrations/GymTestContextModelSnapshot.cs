// <auto-generated />
using System;
using GymTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GymTest.Migrations
{
    [DbContext(typeof(GymTestContext))]
    partial class GymTestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GymTest.Models.Assistance", b =>
                {
                    b.Property<int>("AssistanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssistanceDate");

                    b.Property<int>("UserId");

                    b.HasKey("AssistanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Assistance");
                });

            modelBuilder.Entity("GymTest.Models.CashCategory", b =>
                {
                    b.Property<int>("CashCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CashCategoryDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CashCategoryId");

                    b.ToTable("CashCategory");
                });

            modelBuilder.Entity("GymTest.Models.CashMovement", b =>
                {
                    b.Property<int>("CashMovementId")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Amount")
                        .IsRequired();

                    b.Property<int>("CashCategoryId");

                    b.Property<DateTime>("CashMovementDate");

                    b.Property<string>("CashMovementDetails")
                        .HasMaxLength(200);

                    b.Property<int>("CashMovementTypeId");

                    b.Property<int>("SupplierId");

                    b.HasKey("CashMovementId");

                    b.HasIndex("CashCategoryId");

                    b.HasIndex("CashMovementTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CashMovement");
                });

            modelBuilder.Entity("GymTest.Models.CashMovementType", b =>
                {
                    b.Property<int>("CashMovementTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CashMovementTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CashMovementTypeId");

                    b.ToTable("CashMovementType");
                });

            modelBuilder.Entity("GymTest.Models.MedicalEmergency", b =>
                {
                    b.Property<int>("MedicalEmergencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MedicalEmergencyDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("MedicalEmergencyId");

                    b.ToTable("MedicalEmergency");
                });

            modelBuilder.Entity("GymTest.Models.MovementType", b =>
                {
                    b.Property<int>("MovementTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("MovementTypeId");

                    b.ToTable("MovementType");
                });

            modelBuilder.Entity("GymTest.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Everyone");

                    b.Property<string>("Message");

                    b.Property<bool>("Send");

                    b.Property<string>("To");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("GymTest.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Amount")
                        .IsRequired();

                    b.Property<DateTime>("LimitUsableDate");

                    b.Property<int>("MovementTypeId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int>("QuantityMovmentType");

                    b.Property<int>("UserId");

                    b.HasKey("PaymentId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("GymTest.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SupplierDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("GymTest.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Commentaries")
                        .HasMaxLength(200);

                    b.Property<string>("ContactFullName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhones")
                        .HasMaxLength(200);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("HealthCronicalProblems")
                        .HasMaxLength(1000);

                    b.Property<string>("HealthHeartProblems")
                        .HasMaxLength(1000);

                    b.Property<string>("HealthPhysicalProblems")
                        .HasMaxLength(1000);

                    b.Property<string>("HealthRegularPills")
                        .HasMaxLength(1000);

                    b.Property<int>("MedicalEmergencyId");

                    b.Property<string>("Phones")
                        .HasMaxLength(200);

                    b.Property<DateTime>("SignInDate");

                    b.Property<string>("Target")
                        .HasMaxLength(200);

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("MedicalEmergencyId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GymTest.Models.Assistance", b =>
                {
                    b.HasOne("GymTest.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymTest.Models.CashMovement", b =>
                {
                    b.HasOne("GymTest.Models.CashCategory", "CashCategory")
                        .WithMany()
                        .HasForeignKey("CashCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymTest.Models.CashMovementType", "CashMovementType")
                        .WithMany()
                        .HasForeignKey("CashMovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymTest.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymTest.Models.Payment", b =>
                {
                    b.HasOne("GymTest.Models.MovementType", "MovmentType")
                        .WithMany()
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymTest.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymTest.Models.User", b =>
                {
                    b.HasOne("GymTest.Models.MedicalEmergency", "MedicalEmergency")
                        .WithMany()
                        .HasForeignKey("MedicalEmergencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
